from cmath import cos, sin ,tan
import numpy as np
import random
from curses.textpad import rectangle
from tkinter import CENTER, Y
from turtle import circle, right
from manim import *





class Concept12_1(Scene):
    def construct(self):
        logo = ImageMobject("assets/img/Vizlogo.png").scale(0.08).shift(RIGHT*6.5+UP*3.5)
        self.add(logo)        

        with register_font("/home/eldrich-rikaze/Downloads/Metal-Regular.ttf"):
            title = Text("Axiom: If a transversal intersects two parallel lines, \n then each pair of corresponding angles is equal", font ="Metal" ,font_size=32).set_color(GREEN, PINK)
        title.to_edge(UP, buff=0.5)
        title.to_edge(LEFT, buff=0.6)
        self.play(Write(title))
        self.wait(4)

        txt1 = Text("Let l1 and l2 be two parallel lines" , color='BLUE' ,slant=ITALIC,font_size=18 )
        txt1.to_edge(LEFT,buff=1)
        txt1.to_edge(DOWN,buff=0.5)
        l1 = Line(start=np.array([-1.5, 1.5, 0]),end=np.array([1.8,1.5,0])).set_color(color=[PINK])
        l2 = Line(start=np.array([-1.5, 0, 0]),end=np.array([1.8,0,0])).set_color(color=[PINK])
        txt2 = Tex(r"$l1$"  , font_size=18 , color = PINK).move_to(np.array([-1.7,1.5,0])).set_height(0.2)
        txt3 = Tex(r"$l2$"  , font_size=18 , color = PINK).move_to(np.array([-1.7,0,0])).set_height(0.2)
        self.play(FadeIn(txt1))
        self.play(FadeIn(l1,l2))
        self.play(FadeIn(txt2,txt3))
        self.wait(7)
        txt4 = Text("Let t be the transversal" , color='BLUE' ,slant=ITALIC ,font_size=18)
        txt4.to_edge(RIGHT,buff=1)
        txt4.to_edge(DOWN,buff=0.5)
        self.play(FadeIn(txt4))
        lt = Line(start=np.array([-0.5,-1, 0]),end=np.array([1.25,2.5,0])).set_color(color=[PINK])
        txt5 = Tex(r"$t$"  , font_size=18 , color = PINK).move_to(np.array([-0.3,-1,0])).set_height(0.2)

        self.play(FadeIn(lt,txt5))
        self.wait(4)
        txt6 = Text("These are the corresponding angles \n present in the figure:" , color='BLUE' ,slant=ITALIC ,font_size=20)
        txt6.to_edge(RIGHT,buff=0.1)
        txt6.to_edge(UP,buff=2)
        self.play(FadeIn(txt6))
        self.wait(4)
        txt7 = Tex( r" $\angle$1"   , font_size=24 , color = GREEN).shift(np.array([1.25,2,0]))
        txt8 = Tex( r" $\angle$2"   , font_size=24 , color = BLUE).shift(np.array([0.25,2,0]))
        txt9 = Tex( r" $\angle$3"   , font_size=24 , color = RED).shift(np.array([0.20,1.15,0]))
        txt10 = Tex( r" $\angle$4"   , font_size=24 , color = YELLOW).shift(np.array([ 1.25,1.15,0]))
        txt11 = Tex( r" $\angle$5"   , font_size=24 , color = GREEN).shift(np.array([0.5,0.5,0]))
        txt12 = Tex( r" $\angle$6"   , font_size=24 , color = BLUE).shift(np.array([-0.5,0.5,0]))
        txt13 = Tex( r" $\angle$7"   , font_size=24 , color = RED).shift(np.array([-0.5,-0.5,0]))
        txt14 = Tex( r" $\angle$8"   , font_size=24 , color = YELLOW).shift(np.array([0.5,-0.5,0]))
        angle1 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = lt.get_angle(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).shift(np.array([0.75,1.5,0]))
        angle2 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = PI-lt.get_angle(), start_angle=lt.get_angle(), color = BLUE,fill_opacity=0.5, stroke_width=0).shift(np.array([0.75,1.5,0]))
        angle3 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = lt.get_angle(), start_angle=PI, color = RED,fill_opacity=0.5, stroke_width=0).shift(np.array([0.75,1.5,0]))
        angle4 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = PI-lt.get_angle(), start_angle=-PI+lt.get_angle(), color = YELLOW,fill_opacity=0.5, stroke_width=0).shift(np.array([0.75,1.5,0]))
        angle5 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = lt.get_angle(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0)
        angle6 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = PI-lt.get_angle(), start_angle=lt.get_angle(), color = BLUE,fill_opacity=0.5, stroke_width=0)
        angle7 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = lt.get_angle(), start_angle=PI, color = RED,fill_opacity=0.5, stroke_width=0)
        angle8 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = PI-lt.get_angle(), start_angle=-PI+lt.get_angle(), color = YELLOW,fill_opacity=0.5, stroke_width=0)
        self.play(FadeIn(txt7 ,txt8 ,txt9,txt10,txt11,txt12,txt13,txt14,angle1,angle2,angle3,angle4,angle5,angle6,angle7,angle8))
        self.wait(4)
        txt15= Tex( r" $\angle$1 " + " and " + r" $\angle$5"     , font_size=24 , color = GREEN)
        txt15.to_edge(RIGHT , buff = 2.5)    
        txt15.to_edge(UP , buff = 3)    

        txt16= Tex( r" $\angle$2"  + " and " + r" $\angle$6" , font_size=24 , color = BLUE)
        txt16.to_edge(RIGHT , buff = 2.5)    
        txt16.to_edge(UP , buff = 3.5)
        txt17= Tex( r" $\angle$3"  + " and " + r" $\angle$7" , font_size=24 , color = RED)
        txt17.to_edge(RIGHT , buff = 2.5)    
        txt17.to_edge(UP , buff = 4)
        txt18 = Tex( r" $\angle$4" + " and " + r" $\angle$8"  , font_size=24 , color = YELLOW)
        txt18.to_edge(RIGHT , buff = 2.5)    
        txt18.to_edge(UP , buff = 4.5)
        
        self.play(FadeIn(txt15,txt16,txt17,txt18))
        self.wait(8)
        

        txt19= Tex( " Let's focus on the angles " +r" $\angle$1 " + " and " + r" $\angle$5"     , font_size=24 , color = GREEN)
        txt19.to_edge(RIGHT,buff=1)
        txt19.to_edge(DOWN,buff=0.5)
        self.remove(txt4,txt1)
        self.play(FadeIn(txt19))
        self.wait(4)
        self.remove(txt8,txt9,txt10,txt12,txt13,txt14)
        self.wait(2)
        self.remove(txt15,txt16,txt17,txt18,txt6,angle2,angle3,angle4,angle6,angle7,angle8)
        self.wait(2)
        txt20 = Text("If we move the line l1 down along the transversal we observe that the angles exactly \n overlap each other " , color='BLUE' ,slant=ITALIC ,font_size=18)
        txt20.to_edge(LEFT,buff=1)
        txt20.to_edge(DOWN,buff=0.5)
        self.remove(txt19)
        self.play(FadeIn(txt20))
        angle11 = AnnularSector(inner_radius=0, outer_radius=0.5, angle = lt.get_angle(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).shift(np.array([0.75,1.5,0]))
        l11 = Line(start=np.array([-1.5, 1.5, 0]),end=np.array([1.5,1.5,0])).set_color(color=[PINK])

        angleline = VGroup(angle11,l11)
        self.play(angleline.animate.shift(0.75*LEFT+1.5*DOWN),run_time = 3)
        self.wait(8)
        self.remove(angleline)
        self.wait(2)
        txt21 = Tex("Let's track the angles " + r" $\angle$1" + " and " + r" $\angle$5" + " while changing the angle of transversal. " , font_size=24 , color = YELLOW)
        txt21.to_edge(LEFT,buff=0.5)
        txt21.to_edge(DOWN,buff=0.5)
        self.remove(txt20)
        self.play(FadeIn(txt21))
        self.wait(5)
        theta  =  ValueTracker(lt.get_angle())
        txt22 = always_redraw(lambda : Tex(r" $\angle$1 " + " = " +  str(round((theta.get_value()*180/PI),2)) + "°" , font_size=24 , color = GREEN).to_edge(RIGHT,buff=0.5).to_edge(UP,buff=3))
        txt23 = always_redraw(lambda : Tex(r" $\angle$5 " + " = " +  str(round((theta.get_value()*180/PI),2)) + "°" , font_size=24 , color = GREEN).to_edge(RIGHT,buff=0.5))

        angle1uf = always_redraw(lambda : AnnularSector(inner_radius=0, outer_radius=0.5, angle = theta.get_value(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).shift(np.array([(1.5-0.75+0.375*tan(theta.get_value()).real)/tan(theta.get_value()).real,1.5,0])))
        angle5uf = always_redraw(lambda : AnnularSector(inner_radius=0, outer_radius=0.5, angle = theta.get_value(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).shift(np.array([(-0.75+0.375*tan(theta.get_value()).real)/tan(theta.get_value()).real,0,0])))
        
        anglefu1 = always_redraw(lambda : AnnularSector(inner_radius=0, outer_radius=0.5, angle = theta.get_value(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).to_edge(RIGHT,buff=2.5).to_edge(UP,buff=3))
        anglefu2 = always_redraw(lambda : AnnularSector(inner_radius=0, outer_radius=0.5, angle = theta.get_value(), start_angle=0, color = GREEN,fill_opacity=0.5, stroke_width=0).to_edge(RIGHT,buff=2.5).shift(DOWN*0.3))


        line1uf = always_redraw(lambda : Line(start=np.array([0.375+1.95*cos(theta.get_value()).real,0.75+1.95*sin(theta.get_value()).real, 0]),end=np.array([0.375,0.75,0])).set_color(color=[PINK]))
        line2uf = always_redraw(lambda : Line(start=np.array([0.375-1.95*cos(theta.get_value()).real,0.75-1.95*sin(theta.get_value()).real, 0]),end=np.array([0.375,0.75,0])).set_color(color=[PINK]))
        self.play(FadeIn(line1uf,line2uf,angle1uf,angle5uf,txt22,txt23,anglefu1,anglefu2))
        self.remove(angle1,angle5,lt)

        self.wait(4)
        self.play(theta.animate.set_value((3*PI/4)),run_time = 3)
        self.wait(4)
        self.play(theta.animate.set_value((PI/4)),run_time = 3)
        self.wait(2)
        self.play(theta.animate.set_value((lt.get_angle())),run_time = 5)
        self.wait(3)
        txt24 = Text("Therefore by changing the angle of transversal, \n we observed that the corresponding angles are equal" , font_size=24 , color = YELLOW)
        txt24.to_edge(LEFT,buff=0.5)
        txt24.to_edge(DOWN,buff=0.5)
        self.remove(txt21)
        self.play(FadeIn(txt24))
        self.wait(8)
        txt25 = Text("Hence we can conclude that each pair of corresponding angles are equal" , font_size=24 , color = YELLOW)
        txt25.to_edge(LEFT,buff=0.5)
        txt25.to_edge(DOWN,buff=0.5)
        self.remove(txt24)
        self.play(FadeIn(txt25))
        self.wait(6)
animation1 = Concept12_1()
animation1.construct()