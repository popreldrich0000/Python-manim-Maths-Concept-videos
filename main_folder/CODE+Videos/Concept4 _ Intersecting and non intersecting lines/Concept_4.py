from cmath import cos, sin 
import numpy as np
import random
from curses.textpad import rectangle
from tkinter import CENTER, Y
from turtle import circle, right
from manim import *
class Concept4_1(Scene):
    def construct(self):
        title = MathTex("Intersecting \ and \ non \ intersecting \ lines").set_color_by_gradient(GREEN, PINK).set_height(0.5)
        title.to_edge(LEFT , buff = 0.5)
        logo = ImageMobject("assets/img/Vizlogo.png").scale(0.08).shift(RIGHT*6.5+UP*3.5)
        title.to_edge(UP, buff=1)
        self.add(logo)        
        self.play(FadeIn(title))
        self.wait(5)
        txt1 = Text("Two lines are said to be Intersecting lines if there exists a commom point which lies on both lines." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = BLUE)
        l1_1 = Line(start=np.array([-0.4, 2, 0]),end=np.array([0.8,-1.5,0])).set_color(color=[ORANGE])
        l1_2 = Line(start=np.array([1.4, 1.4, 0]),end=np.array([-1.4,-1.4,0])).set_color(color=[ORANGE])
        O = Dot([0.29,-0.24,0]).set_color(RED).scale(1).shift(3*LEFT)
        tO = Tex(r"$O$"  , font_size=18 , color = PINK).move_to(np.array([O.get_center()[0]+0.3,O.get_center()[1],0]))
        
        txt1_1 = Text("This is the common point" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE)

        txt1.to_edge( UP , buff = 3)
        txt1.to_edge( LEFT , buff = 0.5)
        self.play(FadeIn(txt1))
        self.wait(10)
        self.remove(title) 
        self.play(txt1.animate.shift(+UP*2),run_time =2)
        self.wait(5)
        txt2 = Text("We can draw two different lines on a Plane in two different ways" , line_spacing=1 ,  slant=ITALIC , font_size=18 , color = PINK)
        txt2.to_edge(DOWN,buff=1)
        self.play(FadeIn(txt2))
        self.wait(4)
        l2_1 = Line(start=np.array([-0.4, 1.5, 0]),end=np.array([0.8,-1.5,0])).set_color(color=[ORANGE]).shift(3*LEFT)
        l2_2 = Line(start=np.array([1.8, 1.5, 0]),end=np.array([-0.8,-1.5,0])).set_color(color=[ORANGE]).shift(3*LEFT)
        l2_3 = Line(start=np.array([1, 2, 0]),end=np.array([-1,-1,0])).set_color(color=[BLUE]).shift(3*RIGHT)
        l2_4 = Line(start=np.array([0, -1, 0]),end=np.array([2,2,0])).set_color(color=[BLUE]).shift(3*RIGHT)

        txt3 = Text("(i) Intersecting lines" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE).shift(3*LEFT)
        txt3.to_edge(DOWN,buff = 2)

        txt4 = Text("(ii) Non-intersecting (parallel) lines" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE).shift(3*RIGHT)
        txt4.to_edge(DOWN,buff = 2)
        self.play(FadeIn(l2_1,l2_2,l2_3,l2_4,txt3,txt4))
        txt5 = Text("Point O is the common point \n between the two lines." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = YELLOW)
        txt5.to_edge(LEFT,buff=0.2)
        txt5.to_edge(DOWN,buff=3.5)
        self.wait(4)
        self.play(FadeIn(txt5,O,tO))
        self.wait(8)
class Concept4_2(Scene):
    def construct(self):
        logo = ImageMobject("assets/img/Vizlogo.png").scale(0.08).shift(RIGHT*6.5+UP*3.5)
        self.add(logo) 
        txt14 = Text("Take a look at the following lines" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE)
        txt14.to_edge(UP , buff = 1)
        line1_1 = Line(start=np.array([-1.5, 0, 0]),end=np.array([1,0,0])).set_color(color=[BLUE]).shift(3*RIGHT)
        line1_2 = Line(start=np.array([-1, 1, 0]),end=np.array([1,2,0])).set_color(color=[BLUE]).shift(3*RIGHT)
        line2_1 = Line(start=np.array([0,-2 , 0]),end=np.array([-1,0,0])).set_color(color=[RED]).shift(3*LEFT)
        line2_2 = Line(start=np.array([-2.3, 2.3, 0]),end=np.array([0,0,0])).set_color(color=[RED]).shift(3*LEFT)
       

        
        self.play(FadeIn(txt14,line1_1,line1_2,line2_1,line2_2 ))
        self.wait(8)
        self.remove(txt14)
        txt13 = Text("These may seem like non-intersecting lines." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = GREEN)
        txt13.to_edge(UP , buff = 1)
        self.play(FadeIn(txt13))
        self.wait(4)
        line2_3 = DashedLine(start=np.array([-2,2 , 0]),end=np.array([-1,0,0])).set_color(color=[RED]).shift(3*LEFT)
        line1_1ex = DashedLine(start=np.array([-1.5, 0, 0]),end=np.array([-4,0,0])).set_color(color=[BLUE]).shift(3*RIGHT)
        line1_2ex = DashedLine(start=np.array([-3, 0, 0]),end=np.array([-1,1,0])).set_color(color=[BLUE]).shift(3*RIGHT)

        txt6 = Text("But we should recall that a line extends indefinitely in both directions." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = ORANGE)
        txt6.to_edge(DOWN,buff=2.5)
        txt6.to_edge(RIGHT,buff=0.5)

        self.play(FadeIn(txt6))
        self.wait(4)
        self.play(FadeIn(line2_3,line1_1ex,line1_2ex))
        self.wait(8)

        txt7 = Text("So for the followig lines in a plane if we extend them then they will intersect at a point!" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = PINK)
        txt7.to_edge(DOWN,buff=1)
        self.play(FadeIn(txt7))
        self.wait(5)
        O = Dot(point=np.array([-2,2 , 0.]), radius=0.08, stroke_width=0, fill_opacity=1.0, color=PINK).shift(3*LEFT)
        P = Dot(point=np.array([-3,0 , 0.]), radius=0.08, stroke_width=0, fill_opacity=1.0, color=PINK).shift(3*RIGHT)
        self.play(FadeIn(O,P))

        txt8 = Text("And hence we can conclude that two lines in a plane can be non-intersecting \n if and only if they are parallel." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE)
        txt8.to_edge(DOWN,buff=0.6)
        self.remove(txt7)
        self.play(FadeIn(txt8))
        self.wait(6)
class Concept4_3(Scene):
    def construct(self):
        logo = ImageMobject("assets/img/Vizlogo.png").scale(0.08).shift(RIGHT*6.5+UP*3.5)
        self.add(logo)
        with register_font("/home/eldrich-rikaze/Downloads/Metal-Regular.ttf"):
            txt9 = Text("The lengths of the common perpendiculars at different points on these parallel lines is the same." , font='Metal', color = WHITE,  font_size=25)
        txt9.to_edge(UP,buff=0.8)    
        self.play(FadeIn(txt9))
        self.wait(3)
        paral1 =  Line(start=np.array([-2, 2, 0]),end=np.array([2,2,0])).set_color(color=[ORANGE])
        paral2 =  Line(start=np.array([-2,0 , 0]),end=np.array([2,0,0])).set_color(color=[ORANGE])
        l1 = Tex(r"$l_1$"  , font_size=18 , color = PINK).shift(2.3*RIGHT+2*UP)
        l2 = Tex(r"$l_2$"  , font_size=18 , color = PINK).shift(2.3*RIGHT) 

        self.play(Create(paral1))
        self.play(Create(paral2))
        self.play(Create(l1))
        self.play(Create(l2))

        self.wait(4)
        A = Dot([-1,0,0]).set_color(RED).scale(1)
        B = Dot([1,0,0]).set_color(RED).scale(1)
        C = Dot([-1,2,0]).set_color(RED).scale(1)
        D = Dot([1,2,0]).set_color(RED).scale(1)
        tA = Tex(r"$A$"  , font_size=18 , color = PINK).move_to(np.array([A.get_center()[0]-0.5,A.get_center()[1]-0.3,0]))
        tB = Tex(r"$B$"  , font_size=18 , color = PINK).move_to(np.array([B.get_center()[0]+0.5,B.get_center()[1]-0.3,0]))
        tC = Tex(r"$C$"  , font_size=18 , color = PINK).move_to(np.array([C.get_center()[0]-0.5,C.get_center()[1]-0.3,0]))
        tD = Tex(r"$D$"  , font_size=18 , color = PINK).move_to(np.array([D.get_center()[0]+0.5,D.get_center()[1]-0.3,0]))
        self.play(FadeIn(A,B,C,D,tA,tB,tC,tD))
        tad1 = Text("AC and BD are two perpendiculars. " , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = BLUE)
        tad1.to_edge(DOWN,buff=3)
        tad1.to_edge(LEFT,buff = 0.2)
        self.play(FadeIn(tad1))
        self.wait(4)
        pep1_1 = Line(start= np.array([-1,1.7,0]),end = np.array([-0.7,1.7,0])).set_color(color=BLUE)
        pep1_2 = Line(start= np.array([-0.7,1.7,0]),end = np.array([-0.7,2,0])).set_color(color=BLUE)
        pep2_1 = Line(start= np.array([1,1.7,0]),end = np.array([1.3,1.7,0])).set_color(color=BLUE)
        pep2_2 = Line(start= np.array([1.3,1.7,0]),end = np.array([1.3,2,0])).set_color(color=BLUE)
        

        perpl1 =  DashedLine(start=np.array([-1, 2, 0]),end=np.array([-1,0,0])).set_color(color=[GREEN])
        perpl2 =  DashedLine(start=np.array([1, 2, 0]),end=np.array([1,0,0])).set_color(color=[GREEN])
        self.play(Create(perpl1), run_time = 0.3)
        self.play(Create(perpl2), run_time = 0.3)
        self.play(Create(pep1_1), run_time = 0.3)
        self.play(Create(pep1_2), run_time = 0.3)
        self.play(Create(pep2_1), run_time = 0.3)
        self.play(Create(pep2_2), run_time = 0.3)
        self.wait(4)
        

        self.wait(5)
        perpldup1 =  DashedLine(start=np.array([-1, 2, 0]),end=np.array([-1,0,0])).set_color(color=[GREEN]).shift(DOWN*2.5)
        perpldup2 =  DashedLine(start=np.array([1, 2, 0]),end=np.array([1,0,0])).set_color(color=[GREEN]).shift(DOWN*2.5)
        tdA = Tex(r"$A$"  , font_size=18 , color = PINK).move_to(np.array([A.get_center()[0]-0.5,A.get_center()[1]-0.3,0]))
        tdB = Tex(r"$B$"  , font_size=18 , color = PINK).move_to(np.array([B.get_center()[0]+0.5,B.get_center()[1]-0.3,0]))
        tdC = Tex(r"$C$"  , font_size=18 , color = PINK).move_to(np.array([C.get_center()[0]-0.5,C.get_center()[1]-0.3,0]))
        tdD = Tex(r"$D$"  , font_size=18 , color = PINK).move_to(np.array([D.get_center()[0]+0.5,D.get_center()[1]-0.3,0]))

        perpldup1or =  DashedLine(start=np.array([-1, 2, 0]),end=np.array([-1,0,0])).set_color(color=[GREEN])
        perpldup2or =  DashedLine(start=np.array([1, 2, 0]),end=np.array([1,0,0])).set_color(color=[GREEN])
        self.play(FadeIn(perpldup2or,perpldup1or,tdA,tdB,tdC,tdD))
        txt10 = Text("Length of perpenducular from A is equal to Length of perpenducular from B" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = BLUE)
        txt10.to_edge(DOWN,buff=0.2)
        prepobj = VGroup(perpl1 , perpl2,tA,tB,tC,tD)
        self.play(FadeIn(txt10))
        self.play(prepobj.animate.shift(DOWN*2.5),run_time = 2)
        A = Dot([-1,0,0]).set_color(RED).scale(1).shift(DOWN*2.5)
        B = Dot([1,0,0]).set_color(RED).scale(1).shift(DOWN*2.5)
        C = Dot([-1,2,0]).set_color(RED).scale(1).shift(DOWN*2.5)
        D = Dot([1,2,0]).set_color(RED).scale(1).shift(DOWN*2.5)
        tddA = Tex(r"$A$"  , font_size=18 , color = PINK).move_to(np.array([A.get_center()[0]-0.5,A.get_center()[1]-0.3,0]))
        tddB = Tex(r"$B$"  , font_size=18 , color = PINK).move_to(np.array([B.get_center()[0]+0.5,B.get_center()[1]-0.3,0]))
        tddC = Tex(r"$C$"  , font_size=18 , color = PINK).move_to(np.array([C.get_center()[0]-0.5,C.get_center()[1]-0.3,0]))
        tddD = Tex(r"$D$"  , font_size=18 , color = PINK).move_to(np.array([D.get_center()[0]+0.5,D.get_center()[1]-0.3,0]))
        self.play(FadeIn(perpldup1,perpldup2,tddA,tddB,tddC,tddD))
        self.wait(8)
        
        obj1 = VGroup(tddA,perpldup1,tddC)
        obj2 = VGroup(tddB,perpldup2,tddD)
        
        self.remove(prepobj)
        self.play(obj1.animate.shift(RIGHT),obj2.animate.shift(LEFT))
        self.wait(8)
        self.play(obj1.animate.shift(LEFT*0.3),obj2.animate.shift(RIGHT*0.3))
        self.wait(4)

        txt11 = Text("AC = BD" , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = WHITE)
        txt11.to_edge(DOWN ,buff =0.7)
        self.play(FadeIn(txt11))
        self.wait(7)
        perpllast1 =  DashedLine(start=np.array([-1, 2, 0]),end=np.array([-1,0,0])).set_color(color=[GREEN])
        self.play(FadeIn(perpllast1),runtime = 0.2)
        self.play(perpllast1.animate.shift(RIGHT*1.5),runtime= 1)
        self.play(perpllast1.animate.shift(LEFT*2),runtime= 1)
        self.play(perpllast1.animate.shift(RIGHT*6),runtime= 1)

        
        txt12 = Text("This equal length is called \n the distance between two parallel lines." , line_spacing=1  ,  slant=ITALIC , font_size=18 , color = YELLOW)
        txt12.to_edge(RIGHT , buff=0.2)
        txt12.to_edge(DOWN , buff=3)

        self.play(FadeIn(txt12))
        self.wait(4)
run1 =  Concept4_3()
run1.construct()     
